apply plugin: 'com.android.application'

println("-----------------------AutoGradleDemo-----------------------")

/**
 * 从 AutoGradleDemo.properties中读取信息, 检查到release打包，版本号自增，并存入到文件
 * @param path
 * @return
 */
def configAutoCompileInfo(def path) {
    def configsInfoFile = file(path)
    if (!configsInfoFile.canRead()) {
        throw new Exception("Could not find version.properties!")
    }
    Properties props = new Properties()
    //读取配置文件
    props.load(new FileInputStream(configsInfoFile))

    println("AutoGradleDemo: propertiesPath :" + path)

    def versionCode = props['AutoGradleDemo.versionCode'].toInteger()
    def versioName = props['AutoGradleDemo.versioName'].toString()
    /*检查到跑release task时版本号叠加*/
    def runTasks = gradle.startParameter.taskNames
    if ('assembleRelease' in runTasks) {
        props['AutoGradleDemo.versionCode'] = (++versionCode).toString()
        props.store(configsInfoFile.newWriter(), null)
        println("AutoGradleDemo: release versionCode increase current=" + props['AutoGradleDemo.versionCode'])
    }
    return props
}

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.2"

    //设置一个缺省打包，必须(维度的意思)
    flavorDimensions "default"
    //分渠道打包
    productFlavors {
        marketDefault {
            dimension "default"
            manifestPlaceholders = [CHANNEL: "4242424"]
        }
        yumen {
            manifestPlaceholders = [CHANNEL: "4242424"]
            ndk {
                // 指定编译的ABI，选择你项目需要的abi即可
                abiFilters 'armeabi', 'armeabi-v7a'
            }
        }
        googlePlay {
            manifestPlaceholders = [CHANNEL: " 2424"]
            ndk {
                // 指定编译的ABI，选择你项目需要的abi即可
                abiFilters 'x86', 'x86_64'
            }
        }
    }

    //加载gradle.properties中存储的release配置文件路径
    if (project.hasProperty("AutoGradleDemo.propertiesPath")
            && new File(project.property("AutoGradleDemo.propertiesPath")).exists()) {
        Properties props = configAutoCompileInfo(project.property("AutoGradleDemo.propertiesPath"))

        defaultConfig {
            applicationId "com.auto.gradle"
            minSdkVersion 19
            targetSdkVersion 28
            versionCode props['AutoGradleDemo.versionCode'].toInteger()
            versionName props['AutoGradleDemo.versionName']
            if (versionCode != 0 && props['AutoGradleDemo.versionName'] != null) {
                println("versionCode: " + versionCode);
                println("versionName: " + versionName);
            } else {
                throw new Exception("error:  versionCode pull failed!")
            }

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            externalNativeBuild {
                cmake {

                    cppFlags ""
                }
            }
        }

        signingConfigs {
            //导入release配置信息
            release {
                def storeFile_str = props['AutoGradleDemo.storeFile']
                def keyAlias_str = props['AutoGradleDemo.keyAlias']
                def keyPassword_str = props['AutoGradleDemo.keyPassword']
                def storePassword_str = props['AutoGradleDemo.storePassword']

                if (keyAlias_str != null && keyPassword_str != null && storePassword_str != null && storeFile_str != null) {
                    println("storeFile: " + storeFile_str)
                    println("keyAlias: " + keyAlias_str)
                    println("keyPassword:" + keyPassword_str)
                    println("storePassword:" + storePassword_str)

                    storeFile file(storeFile_str + ".jks")
                    storePassword storePassword_str
                    keyAlias keyAlias_str
                    keyPassword keyPassword_str
                    println(getPath() + "-" + getName() + " pull release-configs successed!")
                } else {
                    throw new Exception("error: " + getPath() + "-" + getName() + " no jks-configs! ")
                }
            }
            //debug签名配置在mould下全局gradle.properties
            debug {
                storeFile file(project['AutoGradleDemo.debugStorePath'])
                storePassword project['AutoGradleDemo.debugStorePassword']
                keyAlias project['AutoGradleDemo.debugKeyAlias']
                keyPassword project['AutoGradleDemo.debugKeyPassword']
            }
        }
    } else {
        throw new Exception("error: " + getPath() + "-" + getName() + " AutoGradleDemo.propertiesPath is not exists! ")
    }

    //声明打包配置
    buildTypes {
        release {
            //配置java可以引用的参数替代符
            buildConfigField 'String', 'ServerPath', '"http://123.24.5.65"'
            //配置res可以引用的参数替代符
            resValue "string", project['AppName.release'], "AutoGradleDemoRelease"

            applicationIdSuffix ".release"//修改appID,方便安装时appid冲突问题
            versionNameSuffix "_release"//修改APP打包名字后缀，添加release标签
            shrinkResources true  // 检查并移除无用res文件，缩小apk
            zipAlignEnabled true  // Zipalign优化，压缩效率高一些
            minifyEnabled true   //是否混淆
            //指定混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false  //是否debug模式
            jniDebuggable true //指定jni是否debug模式打包
            signingConfig signingConfigs.release
        }
        debug {
            //配置java可以引用的参数替代符
            buildConfigField 'String', 'ServerPath', '"http://123.24.5.65"'
            //配置res可以引用的参数替代符
            resValue "string", project['AppName.debug'], "AutoGradleDemoBeta"

            signingConfig signingConfigs.debug

        }
    }



    sourceSets.main {
        //默认是jniLibs，修改为libs目录
//        jniLibs.srcDir 'src/main/libs'
        //disable automatic ndk-build call
        //当手动编写NDK编译指令时设置
//        jni.srcDirs = []
//        manifest.srcFile 'src/main/AndroidManifest.xml'
//        java.srcDirs = ['src/main/java']
//        resources.srcDirs = ['src/main/resources']
//        aidl.srcDirs = ['src/main/aidl']
//        renderscript.srcDirs = ['src/main/renderscript']
//        res.srcDirs = ['src/main/res']
//        assets.srcDirs = ['src/main/assets']

        //指定编译内容
//        debug.setRoot('')
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def fileName
            //打包类型
            def buildType = variant.buildType.name
            //渠道名称
            def channelName = variant.productFlavors[0].name
            //获取时间戳
            def currentTime = new Date().format("YYYY_MM_dd", TimeZone.getTimeZone("GMT+08:00"))
            //制定输出路径
            if (buildType == "release") {
                variant.getPackageApplication().outputDirectory = new File(project['AutoGradleDemo.outReleaseFile'] + "/${currentTime}")
                println "compile name：-----------------${variant.getPackageApplication().outputDirectory}"
                fileName = project['AppName.release'] + "_${channelName}_v${defaultConfig.versionName}_${currentTime}_${buildType}.apk"
                println "compile name：-----------------${fileName}"
                outputFileName = fileName;
            }
        }
    }

}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.0.0-beta01'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha3'
}
println("-----------------------AutoGradleDemo-----------------------")